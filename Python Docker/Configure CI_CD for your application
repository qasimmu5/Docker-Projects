This page guides you through the process of setting up a GitHub Action CI/CD pipeline with Docker containers.
This guide contains instructions on how to:
- Use a sample Docker project as an example to configure GitHub Actions
- Set up the GitHub Actions workflow
- Optimize your workflow to reduce the number of pull requests and the total build time, and finally,
- Push only specific versions to Docker Hub.

Set up a Docker Project:
Let’s get started. This guide uses a simple Docker project as an example. The SimpleWhaleDemo repository contains an Nginx alpine image. You can either clone 
this repository, or use your own Docker project. Before we start, ensure you can access Docker Hub from any workflows you create. To do this:

First Create a new repository for Docker Images in your Github account. In that repository go to setting and go to Secrets. We will be creating 2 secrets one for 
your Dockerhub username and one for Docker personal access token which is also considered as a password. What this is doing is we will connect our github to our
dockerhub account. 

1. Add your Docker ID as a secret to GitHub. Navigate to your GitHub repository and click Settings > Secrets > New secret.

2. Create a new secret with the name DOCKER_HUB_USERNAME and your Docker ID as value.

3. Create a new Personal Access Token (PAT). To create a new token, go to Docker Hub Settings and then click New Access Token.Personal access tokens (PATs) 
are an alternative to using passwords for authentication to GitHub when using the GitHub API or the command line

To use the access token from your Docker CLI client:
 Run docker login -u qasimmu5
 At the password prompt, enter the personal access token.
-> 35ebd06a-7bac-43f4-92b0-e3a2772d387b

4. Let’s call this token simplewhaleci.

5. Now, add this Personal Access Token (PAT) as a second secret into the GitHub secrets UI with the name DOCKER_HUB_ACCESS_TOKEN.
PAT access token 

So basically I have created 2 secrets to Github, one is my username ID and the other is my password or personal access token (PAT) to access Dockerhub through 
Github. 

Set up the Github Actions Workflow: 
In the previous section, we created a PAT and added it to GitHub to ensure we can access Docker Hub from any workflow. Now, let’s set up our GitHub Actions 
workflow to build and store our images in Hub. We can achieve this by creating two Docker actions:

1. The first action enables us to log in to Docker Hub using the secrets we stored in the GitHub Repository.
2. The second one is the build and push action

In this example, let us set the push flag to true as we also want to push. We’ll then add a tag to specify to always go to the latest version. Lastly, 
we’ll echo the image digest to see what was pushed.

To set up the workflow:
Go to the repository earlier for where we will be pushing our docker images and you have created the secrets in the github repository so we can connect to our
docker hub account. 

1. Go to your repository in GitHub and then click Actions > New workflow.
2. Click set up a workflow yourself and add the following content:
First, we will name this workflow:

name: CI to Docker Hub

Then, we will choose when we run this workflow. In our example, we are going to do it for every push against the main branch of our project:
on:
  push:
    branches: [ main ]
    
Now, we need to specify what we actually want to happen within our action (what jobs), we are going to add our build one and select that it runs on the 
latest Ubuntu instances available:

jobs:

  build:
    runs-on: ubuntu-latest
    
Now, we can add the steps required. The first one checks-out our repository under $GITHUB_WORKSPACE, so our workflow can access it. The second is to use our 
PAT and username to log into Docker Hub. The third is the Builder, the action uses BuildKit under the hood through a simple Buildx action which we will also 
setup. the 4th step builds and pushes the images. 5th step is image digest which, a container image digest uniquely and immutably identifies a container image.

steps:

      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
 
Now, let the workflow run for the first time and then tweak the Dockerfile to make sure the CI is running and pushing the new image changes:

I dont know everything works, like I can connect to Docker hub but I get the error for not finding the file Dockerfile. 





