You will build your own image, use that image to run an application locally, and finally, push some of your own images to Docker Cloud.
To see the list of images that are available locally on your system, run the "docker images" command.
The TAG refers to a particular snapshot of the image and the ID is the corresponding unique identifier for that image.

For simplicity, you can think of an image akin to a git repository - images can be committed with changes and have multiple versions. 
When you do not provide a specific version number, the client defaults to latest. So the TAG shows the snapshot of the image in other words the version of the image

For example you could pull a specific version of ubuntu image as follows:
"docker pull ubuntu:12.04" the TAG is used after ":" This shows a specific version or snapshot of that image. If you dont provide a specific version number 
then the default version is "latest" 

There are hundreds of thousands of images available on Docker Store. You can also search for images directly from the command line using "docker search"
An important distinction with regard to images is between base images and child images.
- Base images are images that have no parent images, usually images with an OS like ubuntu, alpine or debian.
- Child images are images that build on base images and add additional functionality.

Another key concept is the idea of official images and user images. (Both of which can be base images or child images.)
- Official images are Docker sanctioned images. Docker, Inc. sponsors a dedicated team that is responsible for reviewing and publishing all 
Official Repositories content. This team works in collaboration with upstream software maintainers, security experts, and the broader Docker community. 
These are not prefixed by an organization or user name. In the list of images above, the python, node, alpine and nginx images are official (base) images.

- User images are images created and shared by users like you. They build on base images and add additional functionality. 
Typically these are formatted as user/image-name. The user value in the image name is your Docker Store user or organization name.

Creating your first image: 
Our goal here is to create an image that sandboxes a small Flask application.
The goal of this exercise is to create a Docker image which will run a Flask app.
do this by first pulling together the components for a random cat picture generator built with Python Flask, then dockerizing it by writing a Dockerfile. 
Finally, we'll build the image, and then run it.

1. Creating a python flask app that displays random Cat .gif pix everytime it is loaded

Start by creating a directory called flask-app where we'll create the following files:

So first create app.py 

from flask import Flask, render_template
import random

app = Flask(__name__)

# list of cat images
images = [
   "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26388-1381844103-11.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr01/15/9/anigif_enhanced-buzz-31540-1381844535-8.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26390-1381844163-18.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-1376-1381846217-0.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3391-1381844336-26.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-29111-1381845968-0.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3409-1381844582-13.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr02/15/9/anigif_enhanced-buzz-19667-1381844937-10.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26358-1381845043-13.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-18774-1381844645-6.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-25158-1381844793-0.gif",
    "http://img.buzzfeed.com/buzzfeed-static/static/2013-10/enhanced/webdr03/15/10/anigif_enhanced-buzz-11980-1381846269-1.gif"
    ]

@app.route('/')
def index():
    url = random.choice(images)
    return render_template('index.html', url=url)

if __name__ == "__main__":
    app.run(host="0.0.0.0")

Then create requirements.txt. This is because we need this to install Python modules for our app. Insert the following text in the requirements.txt 
Flask==0.10.1

Next create a directory called templates and create an index.html file in that directory with the following content. 
<html>
  <head>
    <style type="text/css">
      body {
        background: black;
        color: white;
      }
      div.container {
        max-width: 500px;
        margin: 100px auto;
        border: 20px solid white;
        padding: 10px;
        text-align: center;
      }
      h4 {
        text-transform: uppercase;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h4>Cat Gif of the day</h4>
      <img src="{{url}}" />
      <p><small>Courtesy: <a href="http://www.buzzfeed.com/copyranter/the-best-cat-gif-post-in-the-history-of-cat-gifs">Buzzfeed</a></small></p>
    </div>
  </body>
</html>

2. Creating a Dockerfile 
We want to create a Docker image with this web app. All user images are based on a base image. Since our application is written in Python, we will build our 
own Python image based on Alpine Linux. We'll do that using a Dockerfile.

A Dockerfile is a text file that contains a list of commands that the Docker daemon calls while creating an image. The Dockerfile contains all the information 
that Docker needs to know to run the app â€” a base Docker image to run from, location of your project code, any dependencies it has, and what commands to run at 
start-up. It is a simple way to automate the image creation process. The best part is that the commands you write in a Dockerfile are almost identical to their 
equivalent Linux commands.

Create a file called Dockerfile
Important Note: Make sure that the Dockerfile does not have .txt as the extension and the name is just called Dockerfile.

We'll start by specifying our base image, using the FROM keyword:
FROM alpine:3.5

The next step usually is to write the commands of copying the files and installing the dependencies. But first we will install the Python pip package to the 
alpine linux distribution. This will not just install the pip package but any other dependencies too, which includes the python interpreter. 
Add the following RUN command next:

RUN apk add --update py2-pip

Let's add the files that make up the Flask Application.
Install all Python requirements for our app to run. This will be accomplished by adding the lines:
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt

Copy the files you have created earlier into our image by using COPY command.
COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/

Specify the port number which needs to be exposed. Since our flask app is running on 5000 that's what we'll expose.
EXPOSE 5000

The last step is the command for running the application which is simply - python ./app.py. Use the CMD command to do that:
CMD ["python", "/usr/src/app/app.py"]
Note: I get an error running the command "python ./app.py" to run the application. Hence to run the application type the command "FLASK_APP=app.py flask run"
So in this case the line for docker file to run the application would be: 
CMD ["FLASK_APP=/use/src/app/app.py", "flask", "run"]
The primary purpose of CMD is to tell the container which command it should run by default when it is started.


Our final Dockerfile is ready: 
#Our Base Image
FROM alpine:3.5

#Installing Python and Pip
RUN apk add --update py2-pip

#installing python module flas in this case for our Python app 
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt

# copy files required for the app to run
COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/

# tell the port number the container should expose too
EXPOSE 5000

# run the application
# CMD ["FLASK_APP=/use/src/app/app.py", "flask", "run"]
CMD ["python", "/usr/src/app/app.py"]
Use the 2nd CMD command not the first one. 


3. Building the Image 
Now that you have your Dockerfile, you can build your image. The docker build command does the heavy-lifting of creating a docker image from a Dockerfile.
When you run the "docker build" command given below, make sure to replace <YOUR_USERNAME> with your username. This username should be the same one you created 
when registering on Docker Cloud. If you haven't done that yet, please go ahead and create an account.

The docker build command is quite simple - it takes an optional tag name with the -t flag, and the location of the directory containing the 
Dockerfile - the . indicates the current directory:

Notes: 
- Make sure the Dockerfile does not have .txt extension. 
- Before you build your docker image, make sure to be in the same directory where your dockerfile is and that should be where the Application code and all the 
dependencies are. 

If you get an error -> ERROR [internal] load metadata for docker.io/library/alpine:3.5 
Solution is -> Docker Desktop enables Buildkit by default and you want to disable that. So go to preference and under Docker Engine make Buildkit false. 
And then click apply and restart. 
Actually dont do this. Apparently I wont be able to run other docker images. Leave it to as true. 


If you get the problem -> 
"Pulling from library/alpine
no matching manifest for linux/arm64/v8 in the manifest list entries"
Then basically this is to do with Applie M1 chip. So in order to solve this in the terminal: 
docker pull --platform linux/x86_64 alpine:3.5
What this does is that it downloads the image that you put in your Dockerfile in the FROM section. Make sure the base image and version is the same when running 
the docker pull command. 

Now you can run the command 
docker build -t myfirstapp . 
So -t gives the name "myfirstapp" for our docker image. 

$ docker build -t <YOUR_USERNAME>/myfirstapp .
Sending build context to Docker daemon 9.728 kB
Step 1 : FROM alpine:latest
 ---> 0d81fc72e790
Step 2 : RUN apk add --update py-pip
 ---> Running in 8abd4091b5f5
fetch http://dl-4.alpinelinux.org/alpine/v3.3/main/x86_64/APKINDEX.tar.gz
fetch http://dl-4.alpinelinux.org/alpine/v3.3/community/x86_64/APKINDEX.tar.gz
(1/12) Installing libbz2 (1.0.6-r4)
(2/12) Installing expat (2.1.0-r2)
(3/12) Installing libffi (3.2.1-r2)
(4/12) Installing gdbm (1.11-r1)
(5/12) Installing ncurses-terminfo-base (6.0-r6)
(6/12) Installing ncurses-terminfo (6.0-r6)
(7/12) Installing ncurses-libs (6.0-r6)
(8/12) Installing readline (6.3.008-r4)
(9/12) Installing sqlite-libs (3.9.2-r0)
(10/12) Installing python (2.7.11-r3)
(11/12) Installing py-setuptools (18.8-r0)
(12/12) Installing py-pip (7.1.2-r0)
Executing busybox-1.24.1-r7.trigger
OK: 59 MiB in 23 packages
 ---> 976a232ac4ad
Removing intermediate container 8abd4091b5f5
Step 3 : COPY requirements.txt /usr/src/app/
 ---> 65b4be05340c
Removing intermediate container 29ef53b58e0f
Step 4 : RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt
 ---> Running in a1f26ded28e7
Collecting Flask==0.10.1 (from -r /usr/src/app/requirements.txt (line 1))
  Downloading Flask-0.10.1.tar.gz (544kB)
Collecting Werkzeug>=0.7 (from Flask==0.10.1->-r /usr/src/app/requirements.txt (line 1))
  Downloading Werkzeug-0.11.4-py2.py3-none-any.whl (305kB)
Collecting Jinja2>=2.4 (from Flask==0.10.1->-r /usr/src/app/requirements.txt (line 1))
  Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB)
Collecting itsdangerous>=0.21 (from Flask==0.10.1->-r /usr/src/app/requirements.txt (line 1))
  Downloading itsdangerous-0.24.tar.gz (46kB)
Collecting MarkupSafe (from Jinja2>=2.4->Flask==0.10.1->-r /usr/src/app/requirements.txt (line 1))
  Downloading MarkupSafe-0.23.tar.gz
Installing collected packages: Werkzeug, MarkupSafe, Jinja2, itsdangerous, Flask
  Running setup.py install for MarkupSafe
  Running setup.py install for itsdangerous
  Running setup.py install for Flask
Successfully installed Flask-0.10.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.4 itsdangerous-0.24
You are using pip version 7.1.2, however version 8.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
 ---> 8de73b0730c2
Removing intermediate container a1f26ded28e7
Step 5 : COPY app.py /usr/src/app/
 ---> 6a3436fca83e
Removing intermediate container d51b81a8b698
Step 6 : COPY templates/index.html /usr/src/app/templates/
 ---> 8098386bee99
Removing intermediate container b783d7646f83
Step 7 : EXPOSE 5000
 ---> Running in 31401b7dea40
 ---> 5e9988d87da7
Removing intermediate container 31401b7dea40
Step 8 : CMD python /usr/src/app/app.py
 ---> Running in 78e324d26576
 ---> 2f7357a0805d
Removing intermediate container 78e324d26576
Successfully built 2f7357a0805d

So above it may not look the same but it should say Successfully built. 

Run your Docker Image: 
docker run -p 8888:5000 --name myfirstapp 
Head over to http://localhost:8888 and your app should be live.
http://192.168.2.153:8888


Next Tutorial - > Deploying an app to a swarm. 

